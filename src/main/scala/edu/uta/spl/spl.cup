/********************************************************************************
*
* File: spl.cup
* The SPL parser
*
********************************************************************************/

package edu.uta.spl;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;


parser code {:

    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.FLOAT_LITERAL,
      sym.AND, sym.ARRAY, sym.BOOLEAN, sym.BY, sym.DEF, sym.DIV, sym.ELSE, sym.EQUAL, sym.EXIT, sym.FALSE,
      sym.FLOAT, sym.FOR, sym.IF, sym.INT, sym.LOOP, sym.MOD,
      sym.NOT, sym.OR, sym.PRINT, sym.READ, sym.RETURN, sym.STRING, sym.TO, sym.TYPE, sym.VAR, sym.WHILE,
      sym.PLUS, sym.MINUS, sym.TIMES, sym.TRUE,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI,
      sym.COMMA, sym.SHARP, sym.DOT, sym.LP, sym.RP, sym.LB, sym.RB, sym.LSB, sym.RSB
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "FLOAT_LITERAL",
      "AND &&", "ARRAY", "BOOLEAN", "BY", "DEF", "DIV /", "ELSE", "EQUAL", "EXIT", "FALSE",
      "FLOAT", "FOR", "IF", "INT", "LOOP", "MOD %",
      "NOT", "OR ||", "PRINT", "READ", "RETURN", "STRING", "TO", "TYPE", "VAR", "WHILE",
      "PLUS +", "MINUS -", "TIMES *", "TRUE",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ ==", "NEQ <>", "COLON :", "SEMI ;",
      "COMMA ,", "SHARP #", "DOT .", "LP (", "RP )", "LB "+'{', "RB "+'}', "LSB [", "RSB ]"
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }

:};

/* Terminals */
terminal String  ID, STRING_LITERAL;
terminal Integer INTEGER_LITERAL;
terminal Float 	 FLOAT_LITERAL;
terminal         AND, ARRAY, BOOLEAN, BY, DEF, DIV, ELSE, EQUAL, EXIT, FALSE,
                 FLOAT, FOR, IF, INT, LOOP, MOD,
                 NOT, OR, PRINT, READ, RETURN, STRING, TO, TYPE, VAR, WHILE, UMINUS,
                 PLUS, MINUS, TIMES, TRUE, LT, LEQ, GT, GEQ, EQ, NEQ, COLON, SEMI,
                 COMMA, SHARP, DOT, LP, RP, LB, RB, LSB, RSB;

non terminal Program program;
non terminal BlockSt block;
non terminal Definition def;
non terminal List<Definition> defs;
non terminal List<Bind<Type>> params;
non terminal List<Bind<Expr>> rec_list;
non terminal Bind<Expr> rec;

non terminal Type type;
non terminal Type returntype;
non terminal Lvalue lvalue;
non terminal List<Lvalue> lvalues;
non terminal Expr expression;
non terminal List<Expr> expressions;
non terminal Stmt stmt;
non terminal List<Stmt> stmts;

precedence nonassoc	ELSE;
precedence left AND, OR;
precedence left NOT;
precedence nonassoc EQ, LT, GT, LEQ, GEQ, NEQ;
precedence left	PLUS, MINUS;
precedence left	TIMES, DIV, MOD;
precedence left UMINUS;

start with program;

program         ::= block:b   							{: SPL.setAST(new Program(b)); :}
                ;
block   ::= defs:dl stmts:sl							{: RESULT = new BlockSt(dl,sl); :}
				| stmts:sl       								{: RESULT = new BlockSt(nil,sl); :}
                ;
defs            ::= defs:dl def:d SEMI							{: RESULT = append(dl, d); :}
				| def:d SEMI									{: RESULT = add(d, nil); :}
				;
def				::= VAR ID:i EQUAL expression:e						{: RESULT = new VarDef(i, new AnyType(), e); :}
				| VAR ID:i COLON type:t EQUAL expression:e			{: RESULT = new VarDef(i, t, e); :}
				| TYPE ID:i EQUAL type:t						{: RESULT = new TypeDef(i, t); :}
				| DEF ID:i LP params:pl RP returntype:r LB block:b RB {: RESULT = new FuncDef(i, pl, r, b); :}
				;
params			::= ID:i COLON type:t COMMA params:pl			{: RESULT = add(new Bind<Type>(i, t), pl); :}
				| ID:i COLON type:t								{: RESULT = add(new Bind<Type>(i, t), nil); :}
				| type COMMA params
				| type
				|												{: RESULT = nil; :}
				;
returntype		::= COLON type:t								{: RESULT = t; :}
				|												{: RESULT = new NoType(); :}
				;
rec				::= ID:i EQUAL expression:e							{: RESULT = new Bind<Expr>(i, e); :}
				|
				;

rec_list			::= rec:r COMMA rec_list:rl						{: RESULT = add(r, rl); :}
				| rec:r											{: RESULT = add(r, nil); :}
				;
lvalue			::= ID:i										{: RESULT = new Var(i); :}
				| lvalue:l LSB expression:e RSB						{: RESULT = new ArrayDeref(new LvalExp(l), e); :}
				| lvalue:l DOT ID:i								{: RESULT = new RecordDeref(new LvalExp(l), i); :}
				| lvalue:l SHARP INTEGER_LITERAL:i				{: RESULT = new TupleDeref(new LvalExp(l), i); :}
				;
lvalues		::= lvalues:ll lvalue:l COMMA  				{: RESULT = append(ll ,l); :}
				| lvalue:l										{: RESULT = add(l ,nil); :}
				;
stmts           ::= stmts:sl stmt:s SEMI						{: RESULT = append(sl, s); :}
                | stmt:s SEMI									{: RESULT = add(s, nil); :}
                ;
stmt            ::= lvalue:l EQUAL expression:e						{: RESULT = new AssignSt(l, e); :}
				| ID:i LP expressions:el RP						{: RESULT = new CallSt(i, el); :}
				| LB block:b RB							{: RESULT = b; :}
				| READ LP lvalues:ll RP						{: RESULT = new ReadSt(ll); :}
				| PRINT LP expressions:el RP						{: RESULT = new PrintSt(el); :}
				| IF LP expression:e RP stmt:s						{: RESULT = new IfSt(e, s, null); :}
				| IF LP expression:e RP stmt:s1 ELSE stmt:s2			{: RESULT = new IfSt(e, s1, s2); :}
				| FOR LP ID:i EQUAL expression:e1 TO expression:e2 RP stmt:s			{: RESULT = new ForSt(i, e1, e2, new IntConst(1), s); :}
				| FOR LP ID:i EQUAL expression:e1 TO expression:e2 BY expression:e3 RP stmt:s {: RESULT = new ForSt(i, e1, e2, e3, s); :}
				| WHILE LP expression:e RP stmt:s						{: RESULT = new WhileSt(e, s); :}
				| LOOP stmt:s									{: RESULT = new LoopSt(s); :}
				| EXIT											{: RESULT = new ExitSt(); :}
				| RETURN expression:e									{: RESULT = new ReturnValueSt(e); :}
				| RETURN										{: RESULT = new ReturnSt(); :}
				;
type			::= INT 										{: RESULT = new IntType(); :}
				| FLOAT											{: RESULT = new FloatType(); :}
				| STRING										{: RESULT = new StringType(); :}
				| BOOLEAN										{: RESULT = new BooleanType(); :}
				| ID:i											{: RESULT = new NamedType(i); :}
				| ARRAY LSB type:t RSB							{: RESULT = new ArrayType(t); :}
				| LB params:pl RB								{: RESULT = new RecordType(pl); :}
				| LP params RP
				;

expression            ::= INTEGER_LITERAL:n							{: RESULT = new IntConst(n); :}
				| FLOAT_LITERAL:f								{: RESULT = new FloatConst(f); :}
				| STRING_LITERAL:s								{: RESULT = new StringConst(s); :}
				| TRUE											{: RESULT = new BooleanConst(true); :}
				| FALSE											{: RESULT = new BooleanConst(false); :}
				| lvalue:l										{: RESULT = new LvalExp(l); :}
				| MINUS expression:e				  					{: RESULT = new UnOpExp("minus", e); :}
				| NOT expression:e 									{: RESULT = new UnOpExp("not", e); :}
				| expression:e1 PLUS expression:e2							{: RESULT = new BinOpExp("plus", e1, e2); :}
				| expression:e1 MINUS expression:e2							{: RESULT = new BinOpExp("minus", e1, e2); :}
				| expression:e1 TIMES expression:e2			 				{: RESULT = new BinOpExp("times", e1, e2); :}
				| expression:e1 DIV expression:e2						 	{: RESULT = new BinOpExp("div", e1, e2); :}
				| expression:e1 MOD expression:e2						 	{: RESULT = new BinOpExp("mod", e1, e2); :}
				| expression:e1 AND expression:e2						 	{: RESULT = new BinOpExp("and", e1, e2); :}
				| expression:e1 OR expression:e2						 	{: RESULT = new BinOpExp("or", e1, e2); :}
				| expression:e1 EQ expression:e2						 	{: RESULT = new BinOpExp("eq", e1, e2); :}
				| expression:e1 NEQ expression:e2						 	{: RESULT = new BinOpExp("neq", e1, e2); :}
				| expression:e1 LT expression:e2						 	{: RESULT = new BinOpExp("lt", e1, e2); :}
				| expression:e1 LEQ expression:e2						 	{: RESULT = new BinOpExp("leq", e1, e2); :}
				| expression:e1 GT expression:e2						 	{: RESULT = new BinOpExp("gt", e1, e2); :}
				| expression:e1 GEQ expression:e2							{: RESULT = new BinOpExp("geq", e1, e2); :}
				| ARRAY LP expression:e1 COMMA expression:e2 RP 			{: RESULT = new ArrayGen(e1, e2); :}
				| ID:i LP expressions:el RP 						{: RESULT = new CallExp(i, el); :}
				| LB rec_list:rl RB								{: RESULT = new RecordExp(rl); :}
				| LP RP											{: RESULT = new NullExp(); :}
				| LP expression:e RP									{: RESULT = e; :}
				| LSB expressions:el RSB							{: RESULT = new ArrayExp(el); :}
                ;
expressions		::= expression:e COMMA expressions:el					{: RESULT = add(e, el); :}
				| expression:e										{: RESULT = add(e, nil); :}
				|												{: RESULT = nil; :}
				;



